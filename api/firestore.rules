rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
		match /Users/{id}
    {
    	allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == id;

      match /NotificationTokens/{tokenId}
      {
      	allow read, write: if request.auth != null && request.auth.uid == id;
      }
      
      match /Notifications/{notificationId}
      {
      	allow read: if request.auth != null && request.auth.uid == id;
      }
    }
    match /Trips/{tripId} 
    {
      function hasTripAccess()
      {
      	return request.auth != null &&
        	tripId != null && request.auth.uid in get(/databases/$(database)/documents/Trips/$(tripId)).data.sharedWith;
      }
      
      function hasWriteTripAccess()
      {
      	return request.auth != null &&
        	tripId != null && 
          request.auth.uid in get(/databases/$(database)/documents/Trips/$(tripId)).data.sharedWith &&
          get(/databases/$(database)/documents/Trips/$(tripId)).data.isArchived == false;
      }
      
    	allow read: if request.auth != null && request.auth.uid in resource.data.sharedWith;
      allow write: if request.auth != null && request.auth.uid in resource.data.sharedWith && resource.data.isArchived == false;
      allow create: if request.auth != null;
      
      match /Transactions/{document=**}
      {
      	allow read: if hasTripAccess();
        allow write: if hasWriteTripAccess();
      }
      
      match /Reimbursements/{document=**}
      {
      	allow read: if hasTripAccess();
        allow write: if hasWriteTripAccess();
      }

      match /OverallDebts/{debtId}
      {
      	allow read: if hasTripAccess();
        
        match /OverallDebtSummary/{summaryId}
        {
        	allow read: if hasTripAccess();
        }
      }
      
    }
    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    // match /{document=**} {
    //   allow read, write: if request.time < timestamp.date(2024, 9, 15);
    // }
  }
}